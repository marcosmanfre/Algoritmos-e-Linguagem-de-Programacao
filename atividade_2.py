# -*- coding: utf-8 -*-
"""Atividade 2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d9Ngy8Ree_S3IsWyiv_v3y_Q9P8GMpSv

ATIVIDADE 2

Capítulo 5, Tópico Exercícios propostos, páginas 139 a 141, Exercícios 1 ao 15

1
"""

def par_impar(N):
  if N%2 == 0:
   print ("PAR")
  else:
   print ("Ímpar")

par_impar (6)

"""2"""

def EPrimo (P):
    if P <= 1:
      return "Erro"
    elif P == 2:
      return 1
    elif P % 2 == 0:
      return 0
    else:
      raiz = P ** 0.5
      R = 1
      i = 3
      while i <= raiz and R != 0:
        R = P % i
        i +=2
      return R

"""3"""



"""4"""

binarios = []
def converter(N):
    tipo     = True    
    while tipo :
        resto   = N % 2
        N       = int(N / 2)
        binarios.append(resto)
        if N <= 0:
            tipo = False
            return  print(binarios) 

numero   = int(input(f'Digite um Número : '))
        
converter(numero)

"""5"""

números = list()
while True:
  n = int(input('Digite um valor: '))
  if n not in números:
    números.append(n)
  else:
      print('')
  r = str(input('Quer continuar? [S/N] '))
  if r in 'Nn':
    break
números.sort()
print(F'Você digitou os valores {números}')

"""
6"""

peso = [2, 3, 4, 5, 6]
digito = []

def converte(d):
  return len(str(d))

def multiplica(m,p):
  resultado = int(peso[p]) * int(m)
  digitos.append(resultado)
  return int(resultado)

def verifica(v):
  resultado = int(v / 7)
  return resultado

def addlista(addl):
  digitos.append(addl)

tipo = True
somatodos = 0
while tipo:
  aux = 0
  soma = 0
  digitos = []
  produto = int(input('Inserir Código do produto: '))
  if produto < 10000 or produto > 30000:
    produto = int(input('Números aceitaveis são acima de 10000 e abaixo de 30000: '))
  else:
    tm = str(converte(produto))
    conv = str(produto)
    vl = int(tm)
    digitos.clear
    while aux < vl:
      soma = soma + multiplica(conv[aux:aux+1],aux)
      aux += 1
    print(f'Confere itens:  ',digitos)
    print(f'Número verificador: ',verifica(soma))

"""7

8
"""

from random import randint

lista    = []
resposta = []
newlist  = []

def listaaleatoria(m):
    for aux in range(m):
        lista.append(randint(1,500) / 0.4)
    return lista

def maior(L) :
    newlist = L
    newlist.sort(key=int, reverse=True)
    return 'Maior:',newlist[0]

def menor(L) :
    newlist = L
    newlist.sort(key=int)
    return 'Menor:',newlist[0]    

def soma(L) :
    aux    = 0
    soma   = 0
    for laco in L:       
        soma = soma + L[aux]        
        aux += 1
    return 'Soma:',soma

def media(L) :
    aux    = 0
    add    = 0
    for laco in L:       
        add = add + L[aux]        
        aux += 1
    return 'Media:',add / (aux)

def operacao(L):
    
    lista.clear
    resposta.clear
    newlist.clear

    resposta.append(soma(L))
    resposta.append(media(L))
    resposta.append(menor(L))    
    resposta.append(maior(L))        
    print('-'*50)  
    print('RESULTADO')      
    print(resposta)
    print(f'Lista Original:',L)
    print('-'*50)

ale = int(input('Digite um numero para gerar os valores: '))
operacao(listaaleatoria(ale))

"""10

"""

def remover_repetidos(lista):
  l = []
  for i in lista:
    if i not in l:
      l.append(i)
  l.sort()
  return l

"""11"""

def bubble_sort(lista):
    elementos = len(lista)-1
    ordenado = False
    while not ordenado:
        ordenado = True
        for i in range(elementos):
            if lista[i] > lista[i+1]:
                lista[i], lista[i+1] = lista[i+1],lista[i]
                ordenado = False        
                print(lista)
    return lista

"""12

"""

def fibo(n):
  if n <= 1:
    return n
  else:
    return fibo(n-1) + fibo(n-2)

